{{ if .Values.clearml_serving_triton.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  labels:
    clearml.serving.service: clearml-serving-triton
  name: clearml-serving-triton
spec:
  replicas: 1
  selector:
    matchLabels:
      clearml.serving.service: clearml-serving-triton
  strategy: {}
  template:
    metadata:
      annotations: {}
      labels:
        clearml.serving.network/clearml-serving-backend: "true"
        clearml.serving.service: clearml-serving-triton
    spec:
      containers:
        - env:
            - name: CLEARML_API_ACCESS_KEY
              value: "{{ .Values.clearml.apiAccessKey }}"
            - name: CLEARML_API_SECRET_KEY
              value: "{{ .Values.clearml.apiSecretKey }}"
            - name: CLEARML_API_HOST
              value: "{{ .Values.clearml.apiHost }}"
            - name: CLEARML_FILES_HOST
              value: "{{ .Values.clearml.filesHost }}"
            - name: CLEARML_WEB_HOST
              value: "{{ .Values.clearml.webHost }}"
            - name: CLEARML_SERVING_TASK_ID
              value: "{{ .Values.clearml.servingTaskId }}"
            - name: CLEARML_TRITON_POLL_FREQ
              value: "1.0"
            - name: CLEARML_TRITON_METRIC_FREQ
              value: "1.0"
            {{- if .Values.clearml_serving_triton.extraPythonPackages }}
            - name: EXTRA_PYTHON_PACKAGES
              value: '{{ join " " .Values.clearml_serving_triton.extraPythonPackages }}'
            {{- end }}
          image: "{{ .Values.clearml_serving_triton.image }}:{{ .Chart.AppVersion }}"
          name: clearml-serving-triton
          ports:
            - containerPort: 8001
          resources: {}
      restartPolicy: Always
status: {}
{{ end }}

